# system
sudo apt update
sudo apt upgrade
sudo apt install build-essential cmake git pkg-config libgtk-3-dev \
                 libavcodec-dev libavformat-dev libswscale-dev \
                 libv4l-dev libxvidcore-dev libx264-dev \
                 libjpeg-dev libpng-dev libtiff-dev \
                 gfortran openexr libatlas-base-dev \
                 python3-dev python3-numpy libtbb2 libtbb-dev \
                 libdc1394-22-dev

# cmake
sudo apt install libssl-dev
wget https://cmake.org/files/v3.22/cmake-3.22.0.tar.gz
tar -zxvf cmake-3.22.0.tar.gz
cd cmake-3.22.0
./bootstrap
make -j
sudo make install
cmake --version

# pip and numpy
sudo apt install python3-pip
sudo apt update
sudo apt upgrade -y

# Cuda-11.4 - if not installed using sdkmanager
sudo apt install cuda
echo 'export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}' >> ~/.bashrc
echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' >> ~/.bashrc
source ~/.bashrc

# CudNN
#sudo apt install libcudnn - if not installed using sdkmanager

# Install tensorrt from apt-get  - if not installed using sdkmanager
sudo apt install tensorrt
sudo apt install python3-libnvinfer-dev
echo 'export PATH=/usr/src/tensorrt/bin:$PATH' >> ~/.bashrc
echo 'export LD_LIBRARY_PATH=/usr/src/tensorrt/lib:$LD_LIBRARY_PATH' >> ~/.bashrc
source ~/.bashrc

# Install tensorrt from source
cd ~/src
git clone -b 8.5.2 https://github.com/nvidia/TensorRT
cd TensorRT/
git submodule update --init --recursive
export TRT_SOURCE=`pwd`
cd $TRT_SOURCE
mkdir -p build && cd build
/usr/local/bin/cmake .. -DGPU_ARCHS=87  -DTRT_LIB_DIR=/usr/lib/aarch64-linux-gnu/ -DCMAKE_C_COMPILER=/usr/bin/gcc -DTRT_BIN_DIR=`pwd`/out
make nvinfer_plugin -j$(nproc)
sudo mv /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.8.5.2 ${HOME}/libnvinfer_plugin.so.8.5.2.bak
sudo cp /home/dv/src/TensorRT/build/libnvinfer_plugin.so.8.5.2 /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.8.5.2
sudo ldconfig

# pycuda
python3 -m pip install numpy pycuda

# check deepstream
dpkg -l | grep deepstream
sudo apt-get update
sudo apt-get install libgstrtspserver-1.0-0
deepstream-app --version

# opencv - if not installed using sdkmanager
# notice that this wont have GPU support, for GPU support compile OpenCV from source
sudo apt install libopencv-dev python3-opencv
python3 -m pip install opencv-python
python3 -m pip install opencv-python-headless  # Optional, for headless environments

# jtop - to check whats installed and whats missing
sudo pip install jetson-stats
sudo systemctl restart jtop.service  #run the service
jtop

# performance check
# NVMe speed
sudo apt install hdparm
sudo hdparm -Tt /dev/nvme0n1
# CPU test
stress-ng --cpu 12 --timeout 60s
# GPU test
sudo apt install glmark2
glmark2 --fullscreen

# check jetpack release
sudo apt install vpi2-dev vpi2-samples
# CPU info	
lscpu
# GPU info	
tegrastats or sudo lshw -C display
# JetPack + GPU/CPU summary	
sudo jetson_release

# device query (check that all works)
cd /usr/local/cuda/samples/1_Utilities/deviceQuery
sudo make
./deviceQuery

        

# system
cd ~ && mkdir src && mkdir dev

# torch
# note: if you run setup and get some user access issues, or something not found
#       when switching user you have to run 'python3 setup.py clean'
python3 -m pip install --upgrade onnx testresources astunparse numpy ninja pyyaml setuptools cmake typing_extensions future six requests dataclasses
cd ~/src
git clone --recursive -b v1.12.0 https://github.com/pytorch/pytorch
cd ~/src/pytorch
export BUILD_VERSION=1.12.0
export TORCH_CUDA_ARCH_LIST="8.7"
python3 setup.py bdist_wheel
cd dist
python3 -m pip install torch-1.12.0*.whl

cd ~/src
python3 -c "import torch; print(f'PyTorch version: {torch.__version__}'); \
print(f'Compute: {torch.cuda.get_arch_list()}'); \
print(f'CUDA available: {torch.cuda.is_available()}'); \
print(f'CUDA version: {torch.version.cuda}'); \
print(f'Device name: {torch.cuda.get_device_name()}')"

# vision
# note: if you run setup and get some user access issues, or something not found
cd ~/src
git clone -b v0.13.0 https://github.com/pytorch/vision.git
cd ~/src/vision
export BUILD_VERSION=0.13.0
export TORCH_CUDA_ARCH_LIST="8.7"
python3 setup.py bdist_wheel
cd dist
pip install torchvision-0.13.0*.whl

cd ~/src
python3 -c "import torch; print(f'PyTorch version: {torch.__version__}'); \
import torchvision; print(f'torchvision version: {torchvision.__version__}'); \
print(f'Compute: {torch.cuda.get_arch_list()}'); \
print(f'CUDA available: {torch.cuda.is_available()}'); \
print(f'CUDA version: {torch.version.cuda}'); \
print(f'Device name: {torch.cuda.get_device_name()}')"

# AI vision stuff
python3 -m pip install cython cython_bbox scipy
python3 -m pip install --upgrade numpy scipy
python3 -m pip install loguru Pillow thop ninja tabulate tensorboard lap motmetrics filterpy onnx onnxruntime-gpu scikit-image tqdm h5py onnxsim
#(optional) to work with panoptic install panopticapi API:
python3 -m pip install git+https://github.com/cocodataset/panopticapi.git
#coco API
python3 -m pip install -U 'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'

# detr
cd ~/src
git clone git@gitlab.com:missionsystems/hyperteaming/detr.git

# test detr
cd ~/src/detr/src
python3 build_model.py
python3 serialise_engine.py
python3 infer_engine.py

# ByteTrack
cd ~/src
git clone https://github.com/FoundationVision/ByteTrack.git
cd ~/src/ByteTrack
python3 -m pip install --editable .

# test ByteTrack
cd ~/src/ByteTrack
mkdir pretrained && cd pretrained
python3 -c "import gdown; gdown.download('https://drive.google.com/uc?id=1uSmhXzyV1Zvb4TJJCzpsZOIcw7CCJLxj', 'bytetrack_x_mot17.pth.tar', quiet=False);"
cd ~/src/ByteTrack
python3 tools/demo_track.py video -f exps/example/mot/yolox_x_mix_det.py -c pretrained/bytetrack_x_mot17.pth.tar --fp16 --fuse --save_result

# Running .mp4 files:
sudo apt install gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly
then
(1) use ffprobe
ffprobe palace.mp4
or
(2) VLC
sudo apt purge vlc
sudo add-apt-repository ppa:ubuntuhandbook1/vlc
sudo apt update
sudo apt install vlc

# 
