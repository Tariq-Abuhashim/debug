sudo apt update
sudo apt upgrade
sudo apt install htop git synaptic gedit gimp inkscape okular doxygen

#python2
sudo apt install python-pip
python -m pip install --upgrade pip

#python3
sudo apt install python3-pip
python3 -m pip install --upgrade pip

#for MVP, jump to CMake then ROS installation

sudo apt install libgsl-dev libglew-dev   (required by Pangolin and structured)
sudo apt install libgflags-dev libgoogle-glog-dev libunwind8   (required by ceres-solver)
sudo apt install libsuitesparse-dev libeigen3-dev libtbb-dev libceres-dev
sudo apt install libboost1.58-all-dev #notice that if you are building ROS with python3, boost has to be compiled from source, see note at the bottom of the page
sudo apt install libcv-dev libopencv-dev #(OpenCV 2.4.9.1, Ubuntu 16.14)
sudo apt install libopencv-dev libopencv-contrib-dev #(Opencv 3.2, Ubuntu 18.04)

#applies to the default pip
pip install -U pip
pip install matplotlib
#pip install opencv-python
#sudo apt install python-opencv (only python2, note: its better to build opencv from source if using python3)
pip install pillow==7.0.0
pip install setuptools==41.0.0

sudo apt install ipython3
python3 -m pip install pandas scipy jupyter ipykernel
sudo apt install python3-tk

*********************************************
FOLLOW THE NUMBERING SEQUENCE OF INSTALLATION
*********************************************
download and install :

	CMake 3.15.4
			$ sudo apt install curl
			$ sudo apt install zlib1g-dev
			#$ sudo apt install libcurl4-openssl-dev
			#$ sudo apt install pkg-config
			#$ sudo apt install qt5-default
			$ cd ~/Downloads/CMake
			$ ./bootstrap --system-curl  #(need to build against system curl to get https support)
			$ make
			$ sudo make install
			$ sudo apt install cmake-curses-gui

	Cuda 9.2 or 9.0 (or do sudo apt install nvidia-cuda-toolkit to install nvcc 7.5 libraries, it wont install cuda)
			$ cd Downloads
			$ sudo dpkg -i cuda-repo-ubuntu1604-9-2-local_9.2.148-1_amd64.deb
			$ sudo apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub
			$ sudo apt-get update
			#set the following environmental variables in ~/.bashrc
			#export PATH=/usr/local/cuda-9.2/bin${PATH:+:${PATH}}
			#export LD_LIBRARY_PATH=/usr/local/cuda-9.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

	CuDNN 7.6.5 (Cuda 9.2)
			$ cd Downloads
			$ sudo dpkg -i libcudnn7_7.6.5.32-1+cuda9.2_amd64.deb
			$ sudo dpkg -i libcudnn7-dev_7.6.5.32-1+cuda9.2_amd64.deb

	pytorch and tensorflow
			$ pip install torch==1.4.0+cu92 torchvision==0.5.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html
			$ pip install --user --upgrade tensorflow-gpu==2.0.0

	eigen
			$ cd build
			$ cmake ..
			$ sudo make install

	ceres-solver (bimos, kalibr, use libceres-dev instead)
			$ git clone https://github.com/ceres-solver/ceres-solver.git
			$ git checkout 1.14.x (bimos graph optimisation requires this branch)
			$ cd ceres-solver/sudo apt install zlib1g-dev
			$ mkdir build
			$ cd build
			$ cmake ..
			$ make -j4
			$ sudo make install

	gtsam-4.0.0-alpha2 (LeGO-LOAM)
			$ wget -O ~/Downloads/gtsam.zip https://github.com/borglab/gtsam/archive/4.0.0-alpha2.zip
  			$ cd ~/Downloads/ && unzip gtsam.zip -d ~/Downloads/
  			$ cd ~/Downloads/gtsam-4.0.0-alpha2/
  			$ mkdir build && cd build
  			$ cmake ..
			$ make -j4
  			$ sudo make install

	ros-kinetic-desktop-full (c3-mvp and catkin_ws)
			NOTE: this installs ros-kinetic precompiled with python2, to compile with python3 follow note at the end
			$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
			$ sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
			$ sudo apt update
			$ sudo apt install ros-kinetic-desktop-full
			$ sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential
			$ sudo rosdep init
			$ rosdep update

	ros-bridge (c3-mvp)
			$ sudo apt install ros-kinetic-rosbridge-server
			$ sudo apt install python-tornado python-bson
			$ pip install roslibpy
			(Note: 	if you get an error AttributeError: 'module' object has no attribute 'SSL_ST_INIT',
				then do $sudo pip install -U pyopenssl )

	web-video-server (c3-mvp)
			$ sudo apt-get install ros-kinetic-web-video-server

	plc-1.8 (maskrcnn_slam_b)
			$ sudo add-apt-repository -y ppa:webupd8team/java
			$ sudo apt update && sudo apt -y install oracle-java8-installer
			$ sudo apt -y install mpi-default-dev openmpi-bin openmpi-common libusb-1.0-0-dev 
			$ sudo apt -y install libqhull* libusb-dev libgtest-dev libxmu-dev libxi-dev
			$ sudo apt -y install git-core freeglut3-dev pkg-config build-essential  
			$ sudo apt -y install libphonon-dev libphonon-dev phonon-backend-gstreamer
			$ sudo apt -y install phonon-backend-vlc graphviz mono-complete qt-sdk libflann-dev
			$ sudo apt -y install libflann1.8 libboost1.58-all-dev
			$
			$ cd /home/mrt/Downloads
			$ wget http://www.vtk.org/files/release/7.1/VTK-7.1.0.tar.gz
			$ tar -xf VTK-7.1.0.tar.gz
			$ cd VTK-7.1.0 && mkdir build && cd build
			$ cmake ..
			$ make -j4
			$ sudo make install
			$
			$ cd /home/mrt/Downloads
			$ wget https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.0.tar.gz	
			$ tar -xf pcl-1.8.0.tar.gz
			$ cd pcl-pcl-1.8.0 && mkdir build && cd build
			$ cmake ..
			$ make -j4
			$ sudo make install

	Pangolin (ORB_SLAM2)
			$ sudo apt install libglew-dev
			$ cd /home/mrt/Downloads/Pangolin
			$ mkdir build
			$ cd build
			$ cmake ..
			$ make
			$ sudo make install

development :

	/home/mrt/Dev/ORB_SLAM2 (compiled with Opencv 3.3.1 or 2.4.9.1)
			$ ./build.sh
			It may fail due to cuda runtime. In this case do
			$ cd build
			$ cmake .. -DCUDA_USE_STATIC_CUDA_RUNTIME=OFF
			$ make -j4

	/home/mrt/Dev/structured (compiled with libopencv-dev or opencv-2.4.9.1, if GDLA causes an issue, check note at the buttom)
			$ sudo apt install libcv-dev libopencv-dev libopenscenegraph-dev libglew-dev
			$ sudo apt install gdal-bin libgdal1-dev python-gdal libvips-dev
			$ sudo apt install libhighgui-dev libcvaux-dev tcl8.4-dev libgsl-dev
			$ sudo apt install tk8.4-dev csh imagemagick
			$ sudo apt install libflann1.8 libboost1.58-all-dev
			$ mkdir build && cd build
			$ cmake .. -DCUDA_USE_STATIC_CUDA_RUNTIME=OFF
			$ make -j4

	/home/mrt/Dev/maskrcnn_slam_b (Previously compile with Opencv 3.3.1 or 2.4.9.1 and PCL 1.8)
			$ ./build.sh

	/home/mrt/c3-mvp
			$ sudo apt install libraw1394-11 libavcodec-ffmpeg56 libavformat-ffmpeg56 libswscale-ffmpeg3 libswresample-ffmpeg1 libavutil-ffmpeg54 libgtkmm-2.4-dev libglademm-2.4-dev libgtkglextmm-x11-1.2-dev libusb-1.0-0
		# install flycapture and spinnaker drivers
			$ cd drivers/spinnaker-1.27.0.48-amd64
			$ ./install_spinnaker.sh
			$ cd drivers/flycapture2-2.13.3.31-amd64
			$ ./install_flycapture.sh
			$ sudo apt install libdmtx-dev libzbar-dev
		# camera ROS drivers from repository (otherwise, find the source)
			$ sudo apt-get install ros-kinetic-pointgrey-camera-driver ros-kinetic-flir-camera-driver
		# install realsense driver : https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md#installing-the-packages
			$ sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE
			$ sudo add-apt-repository "deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo xenial main" -u
			$ sudo apt-get install librealsense2-dkms
			$ sudo apt-get install librealsense2-utils
			$ sudo apt-get install librealsense2-dev
			$ realsense-viewer # to verify and install firmware
			$ sudo apt-get update
			$ sudo apt-get upgrade
		# install realsense-ros driver : refer to https://github.com/IntelRealSense/realsense-ros
			$ sudo apt-get install ros-kinetic-realsense2-camera ros-kinetic-rgbd-launch
			$ source /opt/ros/kinetic/setup.bash
			$ catkin_make

			$ roslaunch realsense2_camera rs_camera.launch  # will publish all the camera streams 
			$ roslaunch realsense2_camera rs_rgbd.launch  # publish an RGBD point cloud

			NOTE: before you run. Update USB memory
			$ sudo gedit /etc/default/grub
			Replace GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
			With 	GRUB_CMDLINE_LINUX_DEFAULT="quiet splash usbcore.usbfs_memory_mb=1000"
			$ sudo update-grub
			$ reboot

	/home/mrt/catkin_ws (obindex, bimos, kalibr, LeGO-LOAM)
			Kalibr dependencies:
				$ cd ~/catkin_ws/src
				$ git clone https://github.com/ethz-asl/kalibr.git
				$ sudo apt install libv4l-dev
			obindex, bimos:
                https://github.com/emiliofidalgo/bimos/issues/9
                Note: Originally it was developed using OpenCV 2.4, but there is a branch called kinetic
			(in both repositories) including the modifications required to be used with OpenCV 3.1.
		Note: error linking OpenMP : https://cliutils.gitlab.io/modern-cmake/chapters/packages/OpenMP.html
		Note: for pdf writing error when running bimos, edit the file "sudo gedit /etc/ImageMagick-6/policy.xml" by changing PDF rights from none to read|write
				$ cd ~/catkin_ws/src
				$ git clone https://github.com/emiliofidalgo/obindex.git
				$ cd obindex
				$ git checkout kinetic
				$ cd ~/catkin_ws/src
				$ git clone https://github.com/emiliofidalgo/bimos.git
				$ cd bimos && git checkout kinetic
			LeGO-LOAM:
				$ cd ~/catkin_ws/src
				$ git clone https://github.com/RobustFieldAutonomyLab/LeGO-LOAM.git
			$ cd ~/catkin_ws
			$ source /opt/ros/kinetic/setup.bash
			$ catkin_make -DCMAKE_BUILD_TYPE=Release -j1 (only LeGO-LOAM requires -j1)
			


### How to compile ros-kinetic with python3 ? (NOT RECOMMENDED)

#$ pip3 install boost
#https://mastodonboost.readthedocs.io/en/latest/install.html

get boost 1.58.0 from 
https://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz/download

compile using 
./bootstrap.sh --with-python-version=3.5

then follow this page (replace all instance of melodic with kinetic and 18.04 with 16.04)
https://www.miguelalonsojr.com/blog/robotics/ros/python3/2019/08/20/ros-melodic-python-3-build.html

Other sites that could be useful in future:
http://wiki.ros.org/UsingPython3/BuildUsingPython3
https://answers.ros.org/question/295012/how-can-i-install-ros-melodic-with-python3/
https://medium.com/@beta_b0t/how-to-setup-ros-with-python-3-44a69ca36674



########################
Issues with structured : 
########################

#1 Unable to find python bidning for GDAL: Try installing python-gdal

https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html
https://gist.github.com/cspanring/5680334
Then;
after install gdal using these steps on host:
sudo apt-get install gdal-bin
sudo apt-get install libgdal-dev libgdal1i
use
pip install GDAL==$(gdal-config --version) --global-option=build_ext --global-option="-I/usr/include/gdal" 

Here's another way to install gdal python:

$ sudo apt-add-repository ppa:ubuntugis/ubuntugis-unstable
$ sudo apt-get update
$ sudo apt-get install python-gdal

$ pip install pygdal=="$(gdal-config --version).*"

$ git clone https://github.com/OSGeo/gdal.git
$ git checkout release/2.2
$ ./configure --with-python
$ make
$ make install

#2 CMake Error at pbaGPU_generated_ProgramCU.cu.o.cmake:207

make sure cuda toolkit path is correct in cmake config
use ccmake to verify
