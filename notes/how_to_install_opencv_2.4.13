


The following THREE fixes apply to the following repositories:
	1- ORB_SLAM2
	2- structured
	3- maskrcnn_slam_b
	4- catkin_ws
	5- c3-mvp



################
Issue #1: opencv-2.4.13, A package should compile against the same CUDA release OpenCV is using
################



################
Issue #2: compiling opencv-2.4.13, nppi libraries 
################

/usr/bin/ld: cannot find -lopencv_dep_nppicc
/usr/bin/ld: cannot find -lopencv_dep_nppicom
/usr/bin/ld: cannot find -lopencv_dep_nppidei
/usr/bin/ld: cannot find -lopencv_dep_nppif
/usr/bin/ld: cannot find -lopencv_dep_nppig
/usr/bin/ld: cannot find -lopencv_dep_nppim
/usr/bin/ld: cannot find -lopencv_dep_nppist
/usr/bin/ld: cannot find -lopencv_dep_nppisu
/usr/bin/ld: cannot find -lopencv_dep_nppitc
collect2: error: ld returned 1 exit status

solution:

*********** FOLLOW the following FOUT steps

#######(1) in opencv-2.4.13/cmake/FindCUDA.cmake

replace : find_cuda_helper_libs(nppi)
with :
  	find_cuda_helper_libs(nppial)
  	find_cuda_helper_libs(nppicc)
  	find_cuda_helper_libs(nppicom)
  	find_cuda_helper_libs(nppidei)
  	find_cuda_helper_libs(nppif)
  	find_cuda_helper_libs(nppig)
  	find_cuda_helper_libs(nppim)
  	find_cuda_helper_libs(nppist)
  	find_cuda_helper_libs(nppisu)
  	find_cuda_helper_libs(nppitc)

replace : set(CUDA_npp_LIBRARY "${CUDA_nppc_LIBRARY};${CUDA_nppi_LIBRARY};${CUDA_npps_LIBRARY}")
with : set(CUDA_npp_LIBRARY "${CUDA_nppc_LIBRARY};${CUDA_nppial_LIBRARY};${CUDA_nppicc_LIBRARY};${CUDA_nppicom_LIBRARY};${CUDA_nppidei_LIBRARY};${CUDA_nppif_LIBRARY};${CUDA_nppig_LIBRARY};${CUDA_nppim_LIBRARY};${CUDA_nppist_LIBRARY};${CUDA_nppisu_LIBRARY};${CUDA_nppitc_LIBRARY};${CUDA_npps_LIBRARY}")

replace : unset(CUDA_nppi_LIBRARY CACHE)
with :  unset(CUDA_nppial_LIBRARY CACHE)
	unset(CUDA_nppicc_LIBRARY CACHE)
	unset(CUDA_nppicom_LIBRARY CACHE)
	unset(CUDA_nppidei_LIBRARY CACHE)
	unset(CUDA_nppif_LIBRARY CACHE)
	unset(CUDA_nppig_LIBRARY CACHE)
	unset(CUDA_nppim_LIBRARY CACHE)
	unset(CUDA_nppist_LIBRARY CACHE)
	unset(CUDA_nppisu_LIBRARY CACHE)
	unset(CUDA_nppitc_LIBRARY CACHE)


#######(2) in opencv-2.4.13/cmake/OpenCVDetectCUDA.cmake

remove any 2.x architectures, and use


set(__cuda_arch_ptx "")
  if(CUDA_GENERATION STREQUAL "Kepler")
    if(${CUDA_VERSION} VERSION_LESS "5.0")
      set(__cuda_arch_bin "3.0")
    else()
      set(__cuda_arch_bin "3.0 3.5 3.7")
    endif()
  elseif(CUDA_GENERATION STREQUAL "Maxwell")
    set(__cuda_arch_bin "5.0 5.2")
  elseif(CUDA_GENERATION STREQUAL "Auto")
    execute_process( COMMAND "${CUDA_NVCC_EXECUTABLE}" "${OpenCV_SOURCE_DIR}/cmake/checks/OpenCVDetectCudaArch.cu" "--run"
                     WORKING_DIRECTORY "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/"
                     RESULT_VARIABLE _nvcc_res OUTPUT_VARIABLE _nvcc_out
                     ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
    if(NOT _nvcc_res EQUAL 0)
      message(STATUS "Automatic detection of CUDA generation failed. Going to build for all known architectures.")
    else()
      set(__cuda_arch_bin "${_nvcc_out}")
      string(REPLACE "2.1" "2.1(2.0)" __cuda_arch_bin "${__cuda_arch_bin}")
    endif()
  endif()

  if(NOT DEFINED __cuda_arch_bin)
    if(ANDROID)
      if (ARM)
        set(__cuda_arch_bin "3.2")
        set(__cuda_arch_ptx "")
      elseif(AARCH64)
        set(__cuda_arch_bin "5.3")
        set(__cuda_arch_ptx "")
      endif()
    else()
      if(${CUDA_VERSION} VERSION_LESS "5.0")
        set(__cuda_arch_bin "3.0")
      elseif(${CUDA_VERSION} VERSION_GREATER "6.5")
        set(__cuda_arch_bin "3.0 3.5 3.7 5.0 5.2 6.0 6.1")
      else()
        set(__cuda_arch_bin "3.0 3.5 3.7 5.0 5.2 6.0 6.1")
      endif()
      set(__cuda_arch_ptx "3.0")
    endif()
  endif()


#######(3) Remake with IPP ON
cmake -DWITH_IPP=ON . && make -j $(nproc) && make install


#######(4) After installing opencv (using $ sudo make install)
edit ${CMAKE_INSTALL_PREFIX}/share/OpenCV/OpenCVConfig.cmake
as follows

replace : find_cuda_helper_libs(nppi)
with : 
	find_cuda_helper_libs(nppial)
  	find_cuda_helper_libs(nppicc)
  	find_cuda_helper_libs(nppicom)
  	find_cuda_helper_libs(nppidei)
  	find_cuda_helper_libs(nppif)
  	find_cuda_helper_libs(nppig)
  	find_cuda_helper_libs(nppim)
  	find_cuda_helper_libs(nppist)
  	find_cuda_helper_libs(nppisu)
  	find_cuda_helper_libs(nppitc)

replace : list(APPEND OpenCV_CUDA_LIBS_ABSPATH ${CUDA_nppc_LIBRARY} ${CUDA_nppi_LIBRARY} ${CUDA_npps_LIBRARY})
with : list(APPEND OpenCV_CUDA_LIBS_ABSPATH "${CUDA_nppc_LIBRARY};${CUDA_nppial_LIBRARY};${CUDA_nppicc_LIBRARY};${CUDA_nppicom_LIBRARY};${CUDA_nppidei_LIBRARY};${CUDA_nppif_LIBRARY};${CUDA_nppig_LIBRARY};${CUDA_nppim_LIBRARY};${CUDA_nppist_LIBRARY};${CUDA_nppisu_LIBRARY};${CUDA_nppitc_LIBRARY};${CUDA_npps_LIBRARY}")




################
Issue #3: compiling against cuda runtime libraries
################

/usr/bin/ld: cannot find -lopencv_dep_cudart
collect2: error: ld returned 1 exit status

solution: 

This can be resolved by setting CUDA_USE_STATIC_CUDA_RUNTIME=OFF
for CMAKE : ccmake .. -DCUDA_USE_STATIC_CUDA_RUNTIME=OFF
for CATKIN : catkin_make -DCUDA_USE_STATIC_CUDA_RUNTIME=OFF


################
Issue #4: compile opencv against Ubuntu 18.04
################
In Ubuntu 18.04 there is only major gcc version, minor was dropped
OpenCVDetectCXXCompiler.cmake would need to be updated accordingly

  # Typical output in CMAKE_OPENCV_GCC_VERSION_FULL: "c+//0 (whatever) 4.2.3 (...)"
  # Look for the version number
  #string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+" CMAKE_GCC_REGEX_VERSION "${CMAKE_OPENCV_GCC_VERSION_FULL}")
  #if(NOT CMAKE_GCC_REGEX_VERSION)
  #  string(REGEX MATCH "[0-9]+\\.[0-9]+" CMAKE_GCC_REGEX_VERSION "${CMAKE_OPENCV_GCC_VERSION_FULL}")
  #endif()
  string(REGEX MATCH "[0-9]" CMAKE_GCC_REGEX_VERSION "${CMAKE_OPENCV_GCC_VERSION_FULL}")
  if(NOT CMAKE_GCC_REGEX_VERSION)
    string(REGEX MATCH "[0-9]" CMAKE_GCC_REGEX_VERSION "${CMAKE_OPENCV_GCC_VERSION_FULL}")
  endif()

  # Split the three parts:
  string(REGEX MATCHALL "[0-9]+" CMAKE_OPENCV_GCC_VERSIONS "${CMAKE_GCC_REGEX_VERSION}")

  list(GET CMAKE_OPENCV_GCC_VERSIONS 0 CMAKE_OPENCV_GCC_VERSION_MAJOR)
  #list(GET CMAKE_OPENCV_GCC_VERSIONS 1 CMAKE_OPENCV_GCC_VERSION_MINOR)

  set(CMAKE_OPENCV_GCC_VERSION ${CMAKE_OPENCV_GCC_VERSION_MAJOR}${CMAKE_OPENCV_GCC_VERSION_MINOR})
  #math(EXPR CMAKE_OPENCV_GCC_VERSION_NUM "${CMAKE_OPENCV_GCC_VERSION_MAJOR}*100 + ${CMAKE_OPENCV_GCC_VERSION_MINOR}")
  math(EXPR CMAKE_OPENCV_GCC_VERSION_NUM "${CMAKE_OPENCV_GCC_VERSION_MAJOR}")
  message(STATUS "Detected version of GNU GCC: ${CMAKE_OPENCV_GCC_VERSION} (${CMAKE_OPENCV_GCC_VERSION_NUM})")
